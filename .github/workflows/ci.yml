name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set AWS_S3_ENDPOINT for runner access
        run: echo "AWS_S3_ENDPOINT=http://localhost:4566" >> $GITHUB_ENV

      - name: Install yq & jq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Replace secrets in realm-export.json
        run: |
          jq --arg clientId "${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}" \
             --arg clientSecret "${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}" \
             --arg smtpPassword "${{ secrets.GOOGLE_SMTP_PASSWORD }}" \
             --arg smtpEmail "${{ secrets.GOOGLE_SMTP_EMAIL }}" \
             '.identityProviders[].config.clientId = $clientId |
              .identityProviders[].config.clientSecret = $clientSecret |
              .smtpServer.password = $smtpPassword |
              .smtpServer.from = $smtpEmail |
              .smtpServer.fromDisplayName = $smtpEmail |
              .smtpServer.envelopeFrom = $smtpEmail |
              .smtpServer.user = $smtpEmail' \
             ./src/test/resources/realm-base.json > ./src/test/resources/realm-export.json

      - name: Replace client secrets in application-test.yml
        run: |
          yq eval '.stripe.secret_key = "${{ secrets.STRIPE_API_KEY_TEST }}"' ./src/test/resources/application-test.example.yml > ./src/test/resources/application-test.yml

      - name: Grant execute permissions to Maven wrapper
        run: chmod +x ./mvnw

      - name: Start services with Docker Compose
        run: docker compose -f docker-compose-test.yml up -d

      - name: Wait for Keycloak to be ready
        run: |
          URL="http://localhost:9080/realms/master"
          echo "Waiting for Keycloak at $URL"
          until curl -s -f -o /dev/null $URL; do
            echo "Keycloak not ready yet..."
            sleep 5
          done
          echo "Keycloak is up!"

      - name: Wait for LocalStack to be ready
        run: |
          echo "Waiting for LocalStack at $AWS_S3_ENDPOINT"
          until curl -s -f -o /dev/null "$AWS_S3_ENDPOINT/_localstack/health"; do
            echo "LocalStack not ready yet..."
            sleep 5
          done
          echo "LocalStack is up!"

      - name: Wait for S3 Bucket to exist in LocalStack
        run: |
          echo "Waiting for S3 bucket 'ecommerce-buyit-bucket' to exist in LocalStack..."
          until aws --endpoint-url=$AWS_S3_ENDPOINT s3api head-bucket --bucket ecommerce-buyit-bucket 2>/dev/null; do
            echo "Bucket not ready yet..."
            sleep 3
          done
          echo "Bucket is ready!"
      
      

      - name: Run Tests with Maven
        run: ./mvnw verify --batch-mode

      - name: Build Docker image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-spring-boot:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-spring-boot:${{ github.sha }}

      - name: Stop and clean up Docker Compose
        run: docker compose -f docker-compose-test.yml down
